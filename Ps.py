import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class PSFinanceAnalyzer:
    def __init__(self):
        self.parti = "Parti Socialiste (PS)"
        self.colors = ['#FF0000', '#FF6600', '#FF9999', '#CC0000', '#FF3333', 
                      '#990000', '#FF3366', '#FFCCCC', '#FF6666', '#CC6666']
        
        self.start_year = 1971  # Congr√®s d'Epinay - cr√©ation du PS moderne
        self.end_year = 2025
        self.creation_year = 1971
        self.presidential_years = [1974, 1981, 1988, 1995, 2002, 2007, 2012, 2017, 2022]
        
        # Configuration sp√©cifique au PS
        self.config = {
            "type": "parti_politique",
            "orientation": "gauche_gouvernementale",
            "electorat_cible": ["ouvriers", "employes", "enseignants", "fonctionnaires", "classes_moyennes"],
            "budget_base": 20,  # millions d'euros (historiquement important)
            "adherents_base": 100000,
            "importance": "historique",
            "sources_financement": ["cotisations", "dons", "financement_public", "evenements", "elus"]
        }
        
    def generate_financial_data(self):
        """G√©n√®re des donn√©es financi√®res pour le PS"""
        print(f"üèõÔ∏è G√©n√©ration des donn√©es financi√®res pour {self.parti}...")
        
        # Cr√©er une base de donn√©es annuelle
        dates = pd.date_range(start=f'{self.start_year}-01-01', 
                             end=f'{self.end_year}-12-31', freq='Y')
        
        data = {'Annee': [date.year for date in dates]}
        
        # Donn√©es d'adh√©rents et structure
        data['Adherents'] = self._simulate_adherents(dates)
        data['Federations_Departementales'] = self._simulate_federations(dates)
        data['Elus_Locaux'] = self._simulate_elus_locaux(dates)
        data['Elus_Nationaux'] = self._simulate_elus_nationaux(dates)
        data['Maires'] = self._simulate_maires(dates)
        data['Conseillers_Regionaux'] = self._simulate_conseillers_regionaux(dates)
        
        # Revenus du parti
        data['Revenus_Total'] = self._simulate_total_revenue(dates)
        data['Cotisations_Adherents'] = self._simulate_membership_fees(dates)
        data['Dons_Prives'] = self._simulate_private_donations(dates)
        data['Financement_Public'] = self._simulate_public_funding(dates)
        data['Revenus_Evenements'] = self._simulate_event_revenue(dates)
        data['Cotisations_Elus'] = self._simulate_elected_officials_fees(dates)
        data['Revenus_Formations'] = self._simulate_training_revenue(dates)
        
        # D√©penses du parti
        data['Depenses_Total'] = self._simulate_total_expenses(dates)
        data['Depenses_Personnel'] = self._simulate_staff_expenses(dates)
        data['Depenses_Campagnes'] = self._simulate_campaign_expenses(dates)
        data['Depenses_Communication'] = self._simulate_communication_expenses(dates)
        data['Depenses_Fonctionnement'] = self._simulate_operating_expenses(dates)
        data['Depenses_Formation'] = self._simulate_training_expenses(dates)
        data['Depenses_International'] = self._simulate_international_expenses(dates)
        
        # Indicateurs financiers
        data['Taux_Execution_Budget'] = self._simulate_budget_execution_rate(dates)
        data['Ratio_Cotisations_Revenus'] = self._simulate_membership_ratio(dates)
        data['Dependance_Financement_Public'] = self._simulate_public_funding_dependency(dates)
        data['Solde_Financier'] = self._simulate_financial_balance(dates)
        data['Endettement'] = self._simulate_debt(dates)
        
        # Investissements strat√©giques
        data['Investissement_Communication'] = self._simulate_communication_investment(dates)
        data['Investissement_Num√©rique'] = self._simulate_digital_investment(dates)
        data['Investissement_Formation'] = self._simulate_training_investment(dates)
        data['Investissement_Recherche'] = self._simulate_research_investment(dates)
        data['Investissement_International'] = self._simulate_international_investment(dates)
        
        df = pd.DataFrame(data)
        
        # Ajouter des tendances sp√©cifiques au PS
        self._add_party_trends(df)
        
        return df
    
    def _simulate_adherents(self, dates):
        """Simule le nombre d'adh√©rents"""
        base_adherents = self.config["adherents_base"]
        
        adherents = []
        for i, date in enumerate(dates):
            year = date.year
            
            # √âvolution historique des adh√©rents selon les p√©riodes politiques
            if 1971 <= year <= 1981:  # Mont√©e vers le pouvoir
                growth_rate = 0.12
            elif 1981 <= year <= 1988:  # Pr√©sidence Mitterrand
                growth_rate = 0.08
            elif 1988 <= year <= 1995:  # Second septennat
                growth_rate = 0.02
            elif 1995 <= year <= 2002:  # Opposition
                growth_rate = -0.05
            elif 2002 <= year <= 2012:  # Reconstruction et victoire
                growth_rate = 0.10
            elif 2012 <= year <= 2017:  # Pr√©sidence Hollande
                growth_rate = -0.08
            elif 2017 <= year <= 2022:  # Effondrement
                growth_rate = -0.25
            else:  # 2023-2025 - Reconstruction
                growth_rate = 0.03
                
            growth = 1 + growth_rate * (i/10)
            noise = np.random.normal(1, 0.07)
            adherents.append(base_adherents * growth * noise)
        
        return adherents
    
    def _simulate_federations(self, dates):
        """Simule le nombre de f√©d√©rations d√©partementales"""
        base_federations = 100  # M√©tropole + outre-mer
        
        federations = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1990:
                growth_rate = 0.03
            elif year <= 2010:
                growth_rate = 0.01
            else:
                growth_rate = -0.01
                
            growth = 1 + growth_rate * (i/15)
            federations.append(base_federations * growth)
        
        return federations
    
    def _simulate_elus_locaux(self, dates):
        """Simule le nombre d'√©lus locaux"""
        base_elus = 30000
        
        elus = []
        for i, date in enumerate(dates):
            year = date.year
            
            # √âlections municipales
            if year in [1971, 1977, 1983, 1989, 1995, 2001, 2008, 2014, 2020]:
                if year <= 1995:
                    multiplier = 1.2
                elif year <= 2014:
                    multiplier = 1.1
                else:
                    multiplier = 0.8
            else:
                multiplier = 1.0
                
            # Tendance g√©n√©rale
            if year <= 1990:
                growth_rate = 0.04
            elif year <= 2010:
                growth_rate = 0.01
            else:
                growth_rate = -0.03
                
            growth = 1 + growth_rate * (i/20)
            noise = np.random.normal(1, 0.05)
            elus.append(base_elus * growth * multiplier * noise)
        
        return elus
    
    def _simulate_elus_nationaux(self, dates):
        """Simule le nombre d'√©lus nationaux"""
        base_elus = 200
        
        elus = []
        for i, date in enumerate(dates):
            year = date.year
            
            # √âlections l√©gislatives
            if year in [1973, 1978, 1981, 1986, 1988, 1993, 1997, 2002, 2007, 2012, 2017, 2022]:
                if year in [1981, 1988, 1997, 2012]:  # Victoires
                    multiplier = 1.8
                elif year in [1978, 1993, 2002, 2007, 2017]:  # D√©faites
                    multiplier = 0.6
                else:
                    multiplier = 1.2
            else:
                multiplier = 1.0
                
            growth = 1 - 0.01 * (i/10)
            noise = np.random.normal(1, 0.10)
            elus.append(base_elus * growth * multiplier * noise)
        
        return elus
    
    def _simulate_maires(self, dates):
        """Simule le nombre de maires PS"""
        base_maires = 500
        
        maires = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1995:
                growth_rate = 0.05
            elif year <= 2014:
                growth_rate = 0.02
            else:
                growth_rate = -0.04
                
            growth = 1 + growth_rate * (i/15)
            noise = np.random.normal(1, 0.08)
            maires.append(base_maires * growth * noise)
        
        return maires
    
    def _simulate_conseillers_regionaux(self, dates):
        """Simule le nombre de conseillers r√©gionaux"""
        base_conseillers = 300
        
        conseillers = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1986:  # Premi√®res r√©gionales
                if year <= 1998:
                    growth_rate = 0.08
                elif year <= 2010:
                    growth_rate = 0.03
                else:
                    growth_rate = -0.05
            else:
                growth_rate = 0
                
            growth = 1 + growth_rate * max(0, (year - 1986)/20)
            noise = np.random.normal(1, 0.09)
            conseillers.append(base_conseillers * growth * noise if year >= 1986 else 0)
        
        return conseillers
    
    def _simulate_total_revenue(self, dates):
        """Simule les revenus totaux"""
        base_revenue = self.config["budget_base"]
        
        revenue = []
        for i, date in enumerate(dates):
            year = date.year
            
            # Croissance historique des revenus
            if 1971 <= year <= 1981:  # Mont√©e vers le pouvoir
                growth_rate = 0.15
            elif 1981 <= year <= 1995:  # Au pouvoir
                growth_rate = 0.10
            elif 1995 <= year <= 2002:  # Opposition
                growth_rate = -0.03
            elif 2002 <= year <= 2012:  # Reconstruction
                growth_rate = 0.08
            elif 2012 <= year <= 2017:  # Au pouvoir
                growth_rate = 0.05
            elif 2017 <= year <= 2022:  # Effondrement
                growth_rate = -0.20
            else:  # Reconstruction
                growth_rate = 0.02
                
            growth = 1 + growth_rate * (i/15)
            noise = np.random.normal(1, 0.08)
            revenue.append(base_revenue * growth * noise)
        
        return revenue
    
    def _simulate_membership_fees(self, dates):
        """Simule les cotisations des adh√©rents"""
        base_fees = self.config["budget_base"] * 0.20
        
        fees = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1981:
                growth_rate = 0.12
            elif year <= 1995:
                growth_rate = 0.05
            elif year <= 2012:
                growth_rate = 0.03
            else:
                growth_rate = -0.08
                
            growth = 1 + growth_rate * (i/12)
            noise = np.random.normal(1, 0.06)
            fees.append(base_fees * growth * noise)
        
        return fees
    
    def _simulate_private_donations(self, dates):
        """Simule les dons priv√©s"""
        base_donations = self.config["budget_base"] * 0.25
        
        donations = []
        for i, date in enumerate(dates):
            year = date.year
            
            # √âvolution l√©gislative et politique
            if year <= 1990:  # Peu de r√©glementation
                multiplier = 1.3
            elif year <= 2010:  # R√©glementation renforc√©e
                multiplier = 0.9
            else:  # Contr√¥les stricts
                multiplier = 0.7
                
            # Cycles √©lectoraux
            if year in self.presidential_years:
                electoral_multiplier = 1.6
            else:
                electoral_multiplier = 1.0
                
            growth = 1 + 0.02 * (i/10)
            noise = np.random.normal(1, 0.12)
            donations.append(base_donations * growth * multiplier * electoral_multiplier * noise)
        
        return donations
    
    def _simulate_public_funding(self, dates):
        """Simule le financement public"""
        base_funding = self.config["budget_base"] * 0.35
        
        funding = []
        for i, date in enumerate(dates):
            year = date.year
            
            # D√©pend des r√©sultats √©lectoraux
            if year in [1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,  # Mitterrand
                       1997, 1998, 1999, 2000, 2001, 2002,  # Jospin
                       2012, 2013, 2014, 2015, 2016, 2017]:  # Hollande
                multiplier = 1.5
            else:
                multiplier = 0.8
                
            growth = 1 + 0.03 * (i/10)
            noise = np.random.normal(1, 0.07)
            funding.append(base_funding * growth * multiplier * noise)
        
        return funding
    
    def _simulate_event_revenue(self, dates):
        """Simule les revenus des √©v√©nements"""
        base_revenue = self.config["budget_base"] * 0.08
        
        revenue = []
        for i, date in enumerate(dates):
            year = date.year
            
            # Universit√©s d'√©t√©, congr√®s, etc.
            if year in [1971, 1974, 1981, 1988, 1995, 2002, 2008, 2012, 2017, 2022]:
                multiplier = 1.8  # Ann√©es de congr√®s importants
            else:
                multiplier = 1.0
                
            growth = 1 + 0.02 * (i/10)
            noise = np.random.normal(1, 0.10)
            revenue.append(base_revenue * growth * multiplier * noise)
        
        return revenue
    
    def _simulate_elected_officials_fees(self, dates):
        """Simule les cotisations des √©lus"""
        base_fees = self.config["budget_base"] * 0.10
        
        fees = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 2000:
                growth_rate = 0.05
            elif year <= 2015:
                growth_rate = 0.02
            else:
                growth_rate = -0.06
                
            growth = 1 + growth_rate * max(0, (year - 1971)/30)
            noise = np.random.normal(1, 0.08)
            fees.append(base_fees * growth * noise)
        
        return fees
    
    def _simulate_training_revenue(self, dates):
        """Simule les revenus des formations"""
        base_revenue = self.config["budget_base"] * 0.02
        
        revenue = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1990:  # D√©veloppement de l'offre de formation
                growth = 1 + 0.04 * max(0, (year - 1990)/20)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.09)
            revenue.append(base_revenue * growth * noise)
        
        return revenue
    
    def _simulate_total_expenses(self, dates):
        """Simule les d√©penses totales"""
        base_expenses = self.config["budget_base"] * 0.95
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year in self.presidential_years:  # Ann√©es √©lectorales
                multiplier = 1.5
            else:
                multiplier = 1.0
                
            growth = 1 + 0.04 * (i/10)
            noise = np.random.normal(1, 0.07)
            expenses.append(base_expenses * growth * multiplier * noise)
        
        return expenses
    
    def _simulate_staff_expenses(self, dates):
        """Simule les d√©penses de personnel"""
        base_staff = self.config["budget_base"] * 0.40  # Structure importante
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1990:
                growth_rate = 0.06
            elif year <= 2010:
                growth_rate = 0.03
            else:  # Rationalisation
                growth_rate = -0.04
                
            growth = 1 + growth_rate * (i/12)
            noise = np.random.normal(1, 0.05)
            expenses.append(base_staff * growth * noise)
        
        return expenses
    
    def _simulate_campaign_expenses(self, dates):
        """Simule les d√©penses de campagne"""
        base_campaign = self.config["budget_base"] * 0.20
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year in self.presidential_years:  # Ann√©es √©lectorales
                multiplier = 2.5
            elif year in [y-1 for y in self.presidential_years]:  # Ann√©es pr√©-√©lectorales
                multiplier = 1.5
            else:
                multiplier = 0.7
                
            growth = 1 + 0.03 * (i/10)
            noise = np.random.normal(1, 0.15)
            expenses.append(base_campaign * growth * multiplier * noise)
        
        return expenses
    
    def _simulate_communication_expenses(self, dates):
        """Simule les d√©penses de communication"""
        base_communication = self.config["budget_base"] * 0.12
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1990:  # Importance croissante de la communication
                growth = 1 + 0.06 * max(0, (year - 1990)/20)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.10)
            expenses.append(base_communication * growth * noise)
        
        return expenses
    
    def _simulate_operating_expenses(self, dates):
        """Simule les d√©penses de fonctionnement"""
        base_operating = self.config["budget_base"] * 0.15
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            growth = 1 + 0.02 * (i/10)
            noise = np.random.normal(1, 0.04)
            expenses.append(base_operating * growth * noise)
        
        return expenses
    
    def _simulate_training_expenses(self, dates):
        """Simule les d√©penses de formation"""
        base_training = self.config["budget_base"] * 0.05
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1980:  # D√©veloppement de l'offre de formation
                growth = 1 + 0.04 * max(0, (year - 1980)/30)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.08)
            expenses.append(base_training * growth * noise)
        
        return expenses
    
    def _simulate_international_expenses(self, dates):
        """Simule les d√©penses internationales"""
        base_international = self.config["budget_base"] * 0.03
        
        expenses = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1975:  # Engagement international
                growth = 1 + 0.03 * max(0, (year - 1975)/30)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.12)
            expenses.append(base_international * growth * noise)
        
        return expenses
    
    def _simulate_budget_execution_rate(self, dates):
        """Simule le taux d'ex√©cution du budget"""
        rates = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1980:
                base_rate = 0.82
            elif year <= 2000:
                base_rate = 0.85
            elif year <= 2015:
                base_rate = 0.88
            else:  # Difficult√©s financi√®res
                base_rate = 0.80
                
            noise = np.random.normal(1, 0.05)
            rates.append(base_rate * noise)
        
        return rates
    
    def _simulate_membership_ratio(self, dates):
        """Simule le ratio cotisations/revenus"""
        ratios = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1980:
                base_ratio = 0.25
            elif year <= 2000:
                base_ratio = 0.22
            elif year <= 2015:
                base_ratio = 0.18
            else:  # Baisse de la part des cotisations
                base_ratio = 0.12
                
            noise = np.random.normal(1, 0.06)
            ratios.append(base_ratio * noise)
        
        return ratios
    
    def _simulate_public_funding_dependency(self, dates):
        """Simule la d√©pendance au financement public"""
        dependencies = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year <= 1990:
                base_dependency = 0.30
            elif year <= 2010:
                base_dependency = 0.40
            else:  # Plus d√©pendant
                base_dependency = 0.50
                
            noise = np.random.normal(1, 0.07)
            dependencies.append(base_dependency * noise)
        
        return dependencies
    
    def _simulate_financial_balance(self, dates):
        """Simule le solde financier"""
        balances = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year in self.presidential_years:  # D√©ficits √©lectoraux
                base_balance = -0.10
            elif year in [y+1 for y in self.presidential_years]:  # Redressement
                base_balance = 0.05
            else:
                base_balance = 0.02
                
            noise = np.random.normal(1, 0.08)
            balances.append(base_balance * noise)
        
        return balances
    
    def _simulate_debt(self, dates):
        """Simule l'endettement"""
        base_debt = self.config["budget_base"] * 0.3
        
        debt = []
        current_debt = base_debt
        for i, date in enumerate(dates):
            year = date.year
            
            if year in self.presidential_years:  # Augmentation dette
                change_rate = 0.15
            elif year in [y+1 for y in self.presidential_years]:  # R√©duction dette
                change_rate = -0.08
            else:
                change_rate = 0.03
                
            current_debt *= (1 + change_rate)
            noise = np.random.normal(1, 0.06)
            debt.append(current_debt * noise)
        
        return debt
    
    def _simulate_communication_investment(self, dates):
        """Simule l'investissement en communication"""
        base_investment = self.config["budget_base"] * 0.07
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1990:
                growth = 1 + 0.05 * max(0, (year - 1990)/20)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.11)
            investment.append(base_investment * growth * noise)
        
        return investment
    
    def _simulate_digital_investment(self, dates):
        """Simule l'investissement num√©rique"""
        base_investment = self.config["budget_base"] * 0.04
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 2000:
                growth = 1 + 0.10 * max(0, (year - 2000)/15)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.15)
            investment.append(base_investment * growth * noise)
        
        return investment
    
    def _simulate_training_investment(self, dates):
        """Simule l'investissement en formation"""
        base_investment = self.config["budget_base"] * 0.05
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1980:
                growth = 1 + 0.04 * max(0, (year - 1980)/30)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.10)
            investment.append(base_investment * growth * noise)
        
        return investment
    
    def _simulate_research_investment(self, dates):
        """Simule l'investissement en recherche"""
        base_investment = self.config["budget_base"] * 0.03
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1990:
                growth = 1 + 0.03 * max(0, (year - 1990)/20)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.12)
            investment.append(base_investment * growth * noise)
        
        return investment
    
    def _simulate_international_investment(self, dates):
        """Simule l'investissement international"""
        base_investment = self.config["budget_base"] * 0.02
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year >= 1975:
                growth = 1 + 0.02 * max(0, (year - 1975)/30)
            else:
                growth = 1
                
            noise = np.random.normal(1, 0.18)
            investment.append(base_investment * growth * noise)
        
        return investment
    
    def _add_party_trends(self, df):
        """Ajoute des tendances r√©alistes pour le PS"""
        for i, row in df.iterrows():
            year = row['Annee']
            
            # Congr√®s d'Epinay (1971)
            if year == 1971:
                df.loc[i, 'Revenus_Total'] *= 1.5
                df.loc[i, 'Adherents'] *= 2.0
            
            # √âlection de Mitterrand (1981)
            if year == 1981:
                df.loc[i, 'Revenus_Total'] *= 1.8
                df.loc[i, 'Financement_Public'] *= 2.2
                df.loc[i, 'Elus_Nationaux'] *= 2.5
            
            # R√©√©lection de Mitterrand (1988)
            if year == 1988:
                df.loc[i, 'Revenus_Total'] *= 1.3
                df.loc[i, 'Dons_Prives'] *= 1.6
            
            # Victoire de la gauche plurielle (1997)
            if year == 1997:
                df.loc[i, 'Financement_Public'] *= 1.4
                df.loc[i, 'Elus_Nationaux'] *= 1.8
            
            # D√©faite de Jospin (2002)
            if year == 2002:
                df.loc[i, 'Adherents'] *= 0.85
                df.loc[i, 'Financement_Public'] *= 0.75
            
            # D√©faite de Royal (2007)
            if year == 2007:
                df.loc[i, 'Adherents'] *= 0.90
                df.loc[i, 'Revenus_Total'] *= 0.95
            
            # √âlection de Hollande (2012)
            if year == 2012:
                df.loc[i, 'Revenus_Total'] *= 1.4
                df.loc[i, 'Financement_Public'] *= 1.6
                df.loc[i, 'Elus_Nationaux'] *= 1.7
            
            # D√©faite de Hamon (2017)
            if year == 2017:
                df.loc[i, 'Adherents'] *= 0.60
                df.loc[i, 'Revenus_Total'] *= 0.55
                df.loc[i, 'Financement_Public'] *= 0.40
                df.loc[i, 'Elus_Nationaux'] *= 0.30
            
            # Primaires 2022
            if year == 2022:
                df.loc[i, 'Depenses_Campagnes'] *= 1.4
                df.loc[i, 'Investissement_Communication'] *= 1.3
    
    def create_financial_analysis(self, df):
        """Cr√©e une analyse compl√®te des finances du PS"""
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 24))
        
        # 1. √âvolution des revenus et d√©penses
        ax1 = plt.subplot(4, 2, 1)
        self._plot_revenue_expenses(df, ax1)
        
        # 2. Structure des revenus
        ax2 = plt.subplot(4, 2, 2)
        self._plot_revenue_structure(df, ax2)
        
        # 3. Structure des d√©penses
        ax3 = plt.subplot(4, 2, 3)
        self._plot_expenses_structure(df, ax3)
        
        # 4. Adh√©rents et structure
        ax4 = plt.subplot(4, 2, 4)
        self._plot_membership_structure(df, ax4)
        
        # 5. Investissements strat√©giques
        ax5 = plt.subplot(4, 2, 5)
        self._plot_strategic_investments(df, ax5)
        
        # 6. Indicateurs financiers
        ax6 = plt.subplot(4, 2, 6)
        self._plot_financial_indicators(df, ax6)
        
        # 7. √âvolution des √©lus
        ax7 = plt.subplot(4, 2, 7)
        self._plot_elected_officials(df, ax7)
        
        # 8. Situation financi√®re
        ax8 = plt.subplot(4, 2, 8)
        self._plot_financial_situation(df, ax8)
        
        plt.suptitle(f'Analyse des Finances du {self.parti} ({self.start_year}-{self.end_year})', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig(f'PS_financial_analysis.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # G√©n√©rer les insights
        self._generate_financial_insights(df)
    
    def _plot_revenue_expenses(self, df, ax):
        """Plot de l'√©volution des revenus et d√©penses"""
        ax.plot(df['Annee'], df['Revenus_Total'], label='Revenus Totaux', 
               linewidth=2, color='#FF0000', alpha=0.8)
        ax.plot(df['Annee'], df['Depenses_Total'], label='D√©penses Totales', 
               linewidth=2, color='#FF6600', alpha=0.8)
        
        ax.set_title('√âvolution des Revenus et D√©penses (M‚Ç¨)', 
                    fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # Ajouter des annotations pour les √©v√©nements cl√©s
        key_events = {1971: 'Congr√®s Epinay', 1981: 'Mitterrand', 1995: 'Chirac', 
                     1997: 'Gauche Plurielle', 2002: 'D√©faite Jospin', 
                     2012: 'Hollande', 2017: 'Effondrement'}
        
        for year, event in key_events.items():
            if year in df['Annee'].values:
                y_val = df[df['Annee'] == year]['Revenus_Total'].values[0]
                ax.annotate(event, (year, y_val), xytext=(10, 10), 
                           textcoords='offset points', fontsize=8, 
                           arrowprops=dict(arrowstyle='->', alpha=0.6))
    
    def _plot_revenue_structure(self, df, ax):
        """Plot de la structure des revenus"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Cotisations_Adherents', 'Dons_Prives', 'Financement_Public', 
                     'Revenus_Evenements', 'Cotisations_Elus', 'Revenus_Formations']
        colors = ['#FF0000', '#FF6600', '#FF9999', '#CC0000', '#FF3333', '#990000']
        labels = ['Cotisations Adh√©rents', 'Dons Priv√©s', 'Financement Public', 
                 '√âv√©nements', 'Cotisations √âlus', 'Formations']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Structure des Revenus (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_expenses_structure(self, df, ax):
        """Plot de la structure des d√©penses"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Depenses_Personnel', 'Depenses_Campagnes', 'Depenses_Communication',
                     'Depenses_Fonctionnement', 'Depenses_Formation', 'Depenses_International']
        colors = ['#FF0000', '#FF6600', '#FF9999', '#CC0000', '#FF3333', '#990000']
        labels = ['Personnel', 'Campagnes', 'Communication', 'Fonctionnement', 'Formation', 'International']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Structure des D√©penses (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_membership_structure(self, df, ax):
        """Plot des adh√©rents et structure"""
        # Adh√©rents
        ax.bar(df['Annee'], df['Adherents']/1000, label='Adh√©rents (milliers)', 
              color='#FF0000', alpha=0.7)
        
        ax.set_title('Adh√©rents et Structure Territoriale', fontsize=12, fontweight='bold')
        ax.set_ylabel('Adh√©rents (milliers)', color='#FF0000')
        ax.tick_params(axis='y', labelcolor='#FF0000')
        ax.grid(True, alpha=0.3, axis='y')
        
        # F√©d√©rations en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Federations_Departementales'], label='F√©d√©rations D√©partementales', 
                linewidth=2, color='#FF6600')
        ax2.set_ylabel('F√©d√©rations D√©partementales', color='#FF6600')
        ax2.tick_params(axis='y', labelcolor='#FF6600')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_strategic_investments(self, df, ax):
        """Plot des investissements strat√©giques"""
        ax.plot(df['Annee'], df['Investissement_Communication'], label='Communication', 
               linewidth=2, color='#FF0000', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Num√©rique'], label='Num√©rique', 
               linewidth=2, color='#FF6600', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Formation'], label='Formation', 
               linewidth=2, color='#FF9999', alpha=0.8)
        ax.plot(df['Annee'], df['Investissement_Recherche'], label='Recherche', 
               linewidth=2, color='#CC0000', alpha=0.8)
        
        ax.set_title('Investissements Strat√©giques (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_financial_indicators(self, df, ax):
        """Plot des indicateurs financiers"""
        # Taux d'ex√©cution budg√©taire
        ax.bar(df['Annee'], df['Taux_Execution_Budget']*100, label='Taux d\'Ex√©cution (%)', 
              color='#FF0000', alpha=0.7)
        
        ax.set_title('Indicateurs Financiers', fontsize=12, fontweight='bold')
        ax.set_ylabel('Taux d\'Ex√©cution (%)', color='#FF0000')
        ax.tick_params(axis='y', labelcolor='#FF0000')
        ax.grid(True, alpha=0.3, axis='y')
        
        # D√©pendance financement public en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Dependance_Financement_Public']*100, label='D√©pendance Financement Public (%)', 
                linewidth=3, color='#FF6600')
        ax2.set_ylabel('D√©pendance Financement Public (%)', color='#FF6600')
        ax2.tick_params(axis='y', labelcolor='#FF6600')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_elected_officials(self, df, ax):
        """Plot de l'√©volution des √©lus"""
        ax.plot(df['Annee'], df['Elus_Locaux']/1000, label='√âlus Locaux (milliers)', 
               linewidth=2, color='#FF0000', alpha=0.8)
        
        ax.set_title('√âvolution des √âlus', fontsize=12, fontweight='bold')
        ax.set_ylabel('√âlus Locaux (milliers)', color='#FF0000')
        ax.tick_params(axis='y', labelcolor='#FF0000')
        ax.grid(True, alpha=0.3)
        
        # √âlus nationaux en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Elus_Nationaux'], label='√âlus Nationaux', 
                linewidth=2, color='#FF6600', alpha=0.8)
        ax2.set_ylabel('√âlus Nationaux', color='#FF6600')
        ax2.tick_params(axis='y', labelcolor='#FF6600')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_financial_situation(self, df, ax):
        """Plot de la situation financi√®re"""
        # Solde financier
        ax.bar(df['Annee'], df['Solde_Financier']*100, label='Solde Financier (% du budget)', 
              color=df['Solde_Financier'].apply(lambda x: '#009900' if x > 0 else '#FF0000'), alpha=0.7)
        
        ax.set_title('Situation Financi√®re', fontsize=12, fontweight='bold')
        ax.set_ylabel('Solde Financier (% du budget)', color='#FF0000')
        ax.tick_params(axis='y', labelcolor='#FF0000')
        ax.grid(True, alpha=0.3, axis='y')
        
        # Endettement en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Endettement'], label='Endettement (M‚Ç¨)', 
                linewidth=3, color='#FF6600')
        ax2.set_ylabel('Endettement (M‚Ç¨)', color='#FF6600')
        ax2.tick_params(axis='y', labelcolor='#FF6600')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _generate_financial_insights(self, df):
        """G√©n√®re des insights analytiques pour le PS"""
        print(f"üèõÔ∏è INSIGHTS ANALYTIQUES - {self.parti} ({self.start_year}-{self.end_year})")
        print("=" * 70)
        
        # 1. Statistiques de base
        print("\n1. üìà STATISTIQUES G√âN√âRALES:")
        avg_revenue = df['Revenus_Total'].mean()
        avg_expenses = df['Depenses_Total'].mean()
        avg_adherents = df['Adherents'].mean()
        avg_execution = df['Taux_Execution_Budget'].mean() * 100
        
        print(f"Revenus moyens annuels: {avg_revenue:.2f} M‚Ç¨")
        print(f"D√©penses moyennes annuelles: {avg_expenses:.2f} M‚Ç¨")
        print(f"Adh√©rents moyens: {avg_adherents:,.0f} personnes")
        print(f"Taux d'ex√©cution budg√©taire moyen: {avg_execution:.1f}%")
        
        # 2. Croissance historique
        print("\n2. üìä √âVOLUTION HISTORIQUE:")
        revenue_growth = ((df['Revenus_Total'].iloc[-1] / 
                          df['Revenus_Total'].iloc[0]) - 1) * 100
        adherents_growth = ((df['Adherents'].iloc[-1] / 
                           df['Adherents'].iloc[0]) - 1) * 100
        
        print(f"√âvolution des revenus ({self.start_year}-{self.end_year}): {revenue_growth:.1f}%")
        print(f"√âvolution des adh√©rents ({self.start_year}-{self.end_year}): {adherents_growth:.1f}%")
        
        # 3. Structure financi√®re
        print("\n3. üìã STRUCTURE FINANCI√àRE:")
        membership_share = (df['Cotisations_Adherents'].mean() / df['Revenus_Total'].mean()) * 100
        donations_share = (df['Dons_Prives'].mean() / df['Revenus_Total'].mean()) * 100
        public_funding_share = (df['Financement_Public'].mean() / df['Revenus_Total'].mean()) * 100
        elected_share = (df['Cotisations_Elus'].mean() / df['Revenus_Total'].mean()) * 100
        
        print(f"Part des cotisations adh√©rents: {membership_share:.1f}%")
        print(f"Part des dons priv√©s: {donations_share:.1f}%")
        print(f"Part du financement public: {public_funding_share:.1f}%")
        print(f"Part des cotisations √©lus: {elected_share:.1f}%")
        
        # 4. Performance et efficacit√©
        print("\n4. üéØ PERFORMANCE FINANCI√àRE:")
        avg_balance = df['Solde_Financier'].mean() * 100
        last_debt = df['Endettement'].iloc[-1]
        dependency_public = df['Dependance_Financement_Public'].iloc[-1] * 100
        
        print(f"Solde financier moyen: {avg_balance:.1f}% du budget")
        print(f"Endettement final: {last_debt:.1f} M‚Ç¨")
        print(f"D√©pendance au financement public: {dependency_public:.1f}%")
        
        # 5. Sp√©cificit√©s du PS
        print(f"\n5. üåü SP√âCIFICIT√âS DU PARTI SOCIALISTE:")
        print(f"Orientation politique: {self.config['orientation']}")
        print(f"√âlectorat cible: {', '.join(self.config['electorat_cible'])}")
        print(f"Sources de financement: {', '.join(self.config['sources_financement'])}")
        
        # 6. √âv√©nements marquants
        print("\n6. üìÖ √âV√âNEMENTS MARQUANTS:")
        print("‚Ä¢ 1971: Congr√®s d'Epinay - cr√©ation du PS moderne")
        print("‚Ä¢ 1981: √âlection de Fran√ßois Mitterrand")
        print("‚Ä¢ 1988: R√©√©lection de Mitterrand")
        print("‚Ä¢ 1995: D√©faite de Lionel Jospin")
        print("‚Ä¢ 1997: Victoire de la gauche plurielle")
        print("‚Ä¢ 2002: D√©faite historique de Jospin au 1er tour")
        print("‚Ä¢ 2007: D√©faite de S√©gol√®ne Royal")
        print("‚Ä¢ 2012: √âlection de Fran√ßois Hollande")
        print("‚Ä¢ 2017: Effondrement avec Beno√Æt Hamon")
        print("‚Ä¢ 2022: Primaires et reconstruction")
        
        # 7. Recommandations strat√©giques
        print("\n7. üí° RECOMMANDATIONS STRAT√âGIQUES:")
        print("‚Ä¢ Reconstruire la base militante")
        print("‚Ä¢ Diversifier les sources de financement")
        print("‚Ä¢ R√©duire la d√©pendance au financement public")
        print("‚Ä¢ Moderniser l'appareil du parti")
        print("‚Ä¢ Renforcer l'ancrage local et territorial")
        print("‚Ä¢ D√©velopper le fundraising num√©rique")
        print("‚Ä¢ Restructurer la dette historique")
        print("‚Ä¢ Retrouver une cr√©dibilit√© √©conomique")

def main():
    """Fonction principale pour l'analyse du PS"""
    print("üèõÔ∏è ANALYSE DES FINANCES DU PARTI SOCIALISTE (1971-2025)")
    print("=" * 60)
    
    # Initialiser l'analyseur
    analyzer = PSFinanceAnalyzer()
    
    # G√©n√©rer les donn√©es
    financial_data = analyzer.generate_financial_data()
    
    # Sauvegarder les donn√©es
    output_file = 'PS_financial_data_1971_2025.csv'
    financial_data.to_csv(output_file, index=False)
    print(f"üíæ Donn√©es sauvegard√©es: {output_file}")
    
    # Aper√ßu des donn√©es
    print("\nüëÄ Aper√ßu des donn√©es:")
    print(financial_data[['Annee', 'Adherents', 'Revenus_Total', 'Depenses_Total', 'Taux_Execution_Budget']].head())
    
    # Cr√©er l'analyse
    print("\nüìà Cr√©ation de l'analyse financi√®re...")
    analyzer.create_financial_analysis(financial_data)
    
    print(f"\n‚úÖ Analyse des finances du {analyzer.parti} termin√©e!")
    print(f"üìä P√©riode: {analyzer.start_year}-{analyzer.end_year}")
    print("üì¶ Donn√©es: Revenus, d√©penses, adh√©rents, √©lus, indicateurs financiers")

if __name__ == "__main__":
    main()